---------------- Case Study Questions --------------------

-- What is the total amount each customer spent at the restaurant?

SELECT DS.CUSTOMER_ID, SUM(M.PRICE) AS TOTAL_AMOUNT
		FROM DANNY_SALES DS 
			INNER JOIN MENU M on ds.product_id = m.product_id
				group by 1;

-- How many days has each customer visited the restaurant?

SELECT CUSTOMER_ID, COUNT(DISTINCT ORDER_DATE) AS TOTAL_VISITS
	FROM DANNYS_SALES
		GROUP BY 1 

-- What was the first item from the menu purchased by each customer?

WITH CTE AS (SELECT DS.CUSTOMER_ID, M.PRODUCT_ID, M.PRODUCT_NAME
				, ROW_NUMBER() OVER (PARTITION BY DS.CUSTOMER_ID ORDER BY DS.ORDER_DATE) RN 
					FROM DANNYS_SALES DS
						INNER JOIN MENU M ON DS.PRODUCT_ID = M.PRODUCT_ID)
			SELECT * 
				FROM CTE 
				WHERE  RN = 1;
				
                OR

SELECT CUSTOMER_ID
		,FIRST_VALUE(PRODUCT_NAME) OVER (PARTITION BY CUSTOMER_ID ORDER BY ORDER_DATE)
	FROM DANNYS_SALES DS
			INNER JOIN MENU M 
					ON DS.PRODUCT_ID = M.PRODUCT_ID;
                
                
-- What is the most purchased item on the menu and how many times was it purchased by all customers?

SELECT PRODUCT_ID, PRODUCT_NAME, COUNT(DISTINCT CUSTOMER_ID)
		FROM MENU M 
			INNER JOIN DANNYS_SALES DS 
					ON DS.PRODUCT_ID = M.PRODUCT_ID
						GROUP BY 1, 2
							ORDER BY COUNT(DISTINCT CUSTOMER_ID) DESC
								LIMIT 1;
                    

-- Which item was the most popular for each customer?


WITH C AS 
		(SELECT CUSTOMER_ID, PRODUCT_ID, COUNT(PRODUCT_ID) AS COUNT
			, DENSE_RANK() OVER(PARTITION BY CUSTOMER_ID ORDER BY COUNT(PRODUCT_ID)) AS DN 
		 FROM DANNYS_SALES
					GROUP BY 1,2 ORDER BY 1,2)
                    
                 
			SELECT CUSTOMER_ID, C.PRODUCT_ID, PRODUCT_NAME AS POPULAR_PRODUCT, COUNT AS ORDER_COUNT 
				FROM C
					INNER JOIN MENU M ON M.PRODUCT_ID = C.PRODUCT_ID
						WHERE DN = 1;
            
-- Which item was purchased first by the customer after they became a member?

WITH CTE AS 
	(SELECT DS.CUSTOMER_ID, DS.ORDER_DATE, DS.PRODUCT_ID, M1.PRODUCT_NAME, M.JOIN_DATE
	, ROW_NUMBER() OVER(PARTITION BY DS.CUSTOMER_ID ORDER BY ORDER_DATE) RN
		FROM DANNYS_SALES DS 
			INNER JOIN MEMBERS M ON DS.CUSTOMER_ID = M.CUSTOMER_ID
			INNER JOIN MENU M1 ON DS.PRODUCT_ID = M1.PRODUCT_ID
				WHERE DS.ORDER_DATE > M.JOIN_DATE)

SELECT CTE.CUSTOMER_ID, CTE.PRODUCT_ID, CTE.PRODUCT_NAME
	FROM CTE 
		WHERE RN = 1

-- Which item was purchased just before the customer became a member?

WITH CTE AS 
	(SELECT DS.CUSTOMER_ID, DS.ORDER_DATE, DS.PRODUCT_ID, M1.PRODUCT_NAME, M.JOIN_DATE
	, ROW_NUMBER() OVER(PARTITION BY DS.CUSTOMER_ID ORDER BY ORDER_DATE DESC) RN
		FROM DANNYS_SALES DS 
			INNER JOIN MEMBERS M ON DS.CUSTOMER_ID = M.CUSTOMER_ID
			INNER JOIN MENU M1 ON DS.PRODUCT_ID = M1.PRODUCT_ID
				WHERE DS.ORDER_DATE < M.JOIN_DATE)

SELECT CTE.CUSTOMER_ID, CTE.PRODUCT_ID, CTE.PRODUCT_NAME
	FROM CTE 
		WHERE RN = 1
        

-- What is the total items and amount spent for each member before they became a member?

SELECT DS.CUSTOMER_ID, COUNT(M1.PRODUCT_ID)AS TOTAL_ITEMS, SUM(M1.PRICE)AS AMOUNT_SPENT
		FROM DANNYS_SALES DS 
			INNER JOIN MEMBERS M ON DS.CUSTOMER_ID = M.CUSTOMER_ID
			INNER JOIN MENU M1 ON DS.PRODUCT_ID = M1.PRODUCT_ID
				WHERE DS.ORDER_DATE < M.JOIN_DATE
					GROUP BY 1

-- If each $1 spent equates to 10 points and sushi has a 2x points multiplier - how many points would each customer have?

WITH POINTS AS 
				(SELECT CUSTOMER_ID, DS.PRODUCT_ID, M.PRODUCT_NAME, M.PRICE AS PRICE
					, CASE WHEN M.PRODUCT_NAME = 'SUSHI' THEN M.PRICE * 20 ELSE M.PRICE * 10 END AS POINTS
						FROM DANNYS_SALES DS 
							INNER JOIN MENU M ON DS.PRODUCT_ID = M.PRODUCT_ID)
                            
				SELECT CUSTOMER_ID, SUM(POINTS) AS TOTAL_POINTS
					FROM POINTS
						GROUP BY 1

-- In the first week after a customer joins the program (including their join date) they earn 2x points on all items, 
-- not just sushi - how many points do customer A and B have at the end of January?

SELECT DS.CUSTOMER_ID, SUM(M.PRICE * 20) AS POINTS
					FROM DANNYS_SALES DS 
							INNER JOIN MEMBERS M1 ON DS.CUSTOMER_ID = M1.CUSTOMER_ID
							INNER JOIN MENU M ON DS.PRODUCT_ID = M.PRODUCT_ID
					WHERE DS.ORDER_DATE >= M1.JOIN_DATE AND 
					GROUP BY 1
                    
                    
----------------- BONUS QUESTIONS --------------------------------

-- 1. Join All The Things

SELECT DS.CUSTOMER_ID, ORDER_DATE, PRODUCT_NAME, PRICE
	, CASE WHEN (ORDER_DATE < JOIN_DATE OR JOIN_DATE IS NULL) THEN 'N' 
			ELSE 'Y' END AS MEMBER
	FROM DANNYS_SALES DS
			INNER JOIN MEMBERS M1 ON DS.CUSTOMER_ID = M1.CUSTOMER_ID
			INNER JOIN MENU M ON DS.PRODUCT_ID = M.PRODUCT_ID
			ORDER BY DS.CUSTOMER_ID, ORDER_DATE

-- 2 Rank All The Things

WITH C AS (SELECT DS.CUSTOMER_ID, ORDER_DATE, PRODUCT_NAME, PRICE
			, CASE WHEN (ORDER_DATE < JOIN_DATE OR JOIN_DATE IS NULL) THEN "N"
				ELSE "Y" END AS MEMBER
			FROM DANNYS_SALES DS
			LEFT JOIN MEMBERS M1 ON DS.CUSTOMER_ID = M1.CUSTOMER_ID
			INNER JOIN MENU M ON DS.PRODUCT_ID = M.PRODUCT_ID)
           
           SELECT *
			, CASE WHEN MEMBER = "N" THEN NULL
					ELSE DENSE_RANK() OVER(PARTITION BY C.CUSTOMER_ID,MEMBER ORDER BY ORDER_DATE) END AS RANKING
           FROM C
		
			